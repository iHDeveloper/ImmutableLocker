---
import Main from '../layouts/Main.astro';

import CryptoLibs from '../components/CryptoLibs.astro';
---
<Main shortTitle="Viewer" title="View your locker!">
    <CryptoLibs />

    <script type="module">
        import { base64decode, base64ToBytes } from '/js/lib/base64.js';
        import { hashPassphrase, generateKey, decrypt } from '/js/build.js';

        var salt = undefined;
        var hint = undefined;
        var content = undefined;
        var encryptedVerification = undefined;

        async function onLoad(data) {
            // Decode
            const raw = base64decode(data);

            // Store salt, hint, metadata, and content
            const locker = JSON.parse(raw);
            salt = locker.security.salt;
            hint = locker.security.hint;
            encryptedVerification = locker.security.verify;
            content = locker.content

            document.getElementById("locker-raw-metadata").innerText = JSON.stringify(locker.metadata);
            document.getElementById("locker-metadata").innerText = `Title: ${locker.metadata.title}\nAuthor: ${locker.metadata.author}\nDescription: ${locker.metadata.description}\nCreation Date: ${locker.metadata.date}`;
        }

        async function onUnlock(passphrase) {
            const status = document.getElementById("unlock-status");

            if (salt === undefined) {
                status.innerText = "Salt is not available in the locker security! Creating encryption key is not possible... :(";
                return;
            }

            if (content === undefined) {
                status.innerText = "Content is not available to be decrypted!";
            }

            // Generate encryption key
            const hash = await hashPassphrase(passphrase);
            const lockerKey = await generateKey(hash, base64ToBytes(salt));

            if (encryptedVerification !== undefined) {
                const rawVerify = base64ToBytes(encryptedVerification);
                const decryptedVerify = decrypt(lockerKey, rawVerify);

                if (decryptedVerify !== "verified") {
                    status.innerText = "Incorrect passphrase! Try again...";
                    return;
                }

                status.innerText = "Passphrase is correct! Unlocking...";
            } else {
                status.innerText = "No verification method available! The content might not make any sense.";
            }

            const rawContent = base64ToBytes(content);
            const decryptedContent = decrypt(lockerKey, rawContent);
            document.getElementById("locker-content").innerText = decryptedContent;
        }

        document.getElementById("view-form").onsubmit = (e) => {
            e.preventDefault();

            const data = document.getElementById("locker-data").value.trim();
            onLoad(data);
        }

        document.getElementById("passphrase-form").onsubmit = (e) => {
            e.preventDefault();

            const passphrase = document.getElementById("passphrase").value;
            onUnlock(passphrase);
        }

        const showHintButton = document.getElementById("show-hint-button");
        showHintButton.onclick = () => {
            if (hint === undefined) {
                return;
            }

            document.getElementById("passphrase-hint").innerText = base64decode(hint);
            showHintButton.style.display = 'none';
        }
    </script>
    <script type="text/javascript">
        function readDataFromFile(input) {
            const reader = new FileReader();
            reader.onload = (e) => {
                document.getElementById("locker-data").value = e.target.result;
            };
            reader.readAsText(input.files[0]);
        }
    </script>

    <style lang="scss">
        input {
            min-width: 30em;
        }

        #title, #author, #passphrase, #passphrase-hint {
            text-align: center;
        }

        textarea {
            min-width: 50em;
            min-height: 20em;
            margin-bottom: 2em;
        }

        button {
            padding: 5px 35px;
            font-family: sans-serial;
        }

        div.preview {
            border: 2px solid black;
            min-width: 5em;
            min-height: 15em;
            padding: 1em 1em;
            margin: 5em 5em;
            margin-top: 0;
            word-wrap: normal;
            text-align: left;
        }

        form {
            margin-bottom: 3em;
        }
    </style>

    <form id="view-form">
        <center>
            <h2>Locker Data</h2>
            <textarea id="locker-data" required></textarea>

            <br />

            <label>Or, load from file <input id="locker-load-from-file" type="file" onchange="readDataFromFile(this)" /> </label>

            <br /> <br />

            <button type="submit">Load</button>
        </center>
    </form>

    <form id="passphrase-form">
        <center>
            <h2>Passphrase</h2>
            <input id="passphrase" type="password" required/>

            <p>
                Hint: <b id="passphrase-hint"></b>
                <button id="show-hint-button" type="button">Show Hint</button>
            </p>
            
            <button type="submit">Unlock</button>

            <div id="unlock-status" style="margin-top:1em"></div>
        </center>
    </form>

    <center>
        <h2>Raw Metadata</h2>
        <div id="locker-raw-metadata" class="preview"></div>

        <h2>Metadata</h2>
        <div id="locker-metadata" class="preview"></div>

        <h2>Content</h2>
        <div id="locker-content" class="preview"></div>
    </center>
</Main>
